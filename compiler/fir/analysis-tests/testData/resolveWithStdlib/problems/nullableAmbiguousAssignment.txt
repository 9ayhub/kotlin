FILE: nullableAmbiguousAssignment.kt
    public final class SomeBuilder : R|kotlin/Any| {
        public constructor(): R|SomeBuilder| {
            super<R|kotlin/Any|>()
        }

        public final val list: R|kotlin/collections/MutableList<kotlin/String>| = R|kotlin/collections/mutableListOf|<R|kotlin/String|>()
            public get(): R|kotlin/collections/MutableList<kotlin/String>|

    }
    public abstract interface SomeType : R|kotlin/Any| {
        public abstract val list: R|kotlin/collections/List<kotlin/String>|
            public get(): R|kotlin/collections/List<kotlin/String>|

    }
    public final fun someBuild(init: R|SomeBuilder.() -> kotlin/Unit|): R|kotlin/Unit| {
        R|/SomeBuilder.SomeBuilder|().R|kotlin/apply|<R|SomeBuilder|>(R|<local>/init|)
    }
    public final fun foo(type: R|SomeType?|): R|kotlin/Unit| {
        R|/someBuild|(<L> = someBuild@fun R|SomeBuilder|.<anonymous>(): R|kotlin/Unit| {
            ^ R|<local>/type|.R|kotlin/apply|<R|SomeType?|>(<L> = apply@fun R|SomeType?|.<anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
                this@R|special/anonymous|.<Variable expected># = this@R|special/anonymous|.R|/SomeType.list|.R|kotlin/collections/plus|<R|kotlin/String|>(R|kotlin/collections/listOf|<R|kotlin/String|>(vararg(String(Alpha), String(Omega))))
            }
            )
        }
        )
    }
